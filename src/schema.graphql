# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

input AuthByWalletInput {
  network: String = "mumbai"
  signature: String!
  wallet: String!
}

"""Bigint custom scalar type"""
scalar BigInt

input CreateEstateInput {
  buyer: String
  expire_at: DateTime
  nft_id: Int
  price: String
  seller: String
  status: Int
  token_address: String
  type: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Estate {
  buyer: String
  buyer_signature: String

  """Identifies the date and time when the offer closed."""
  closedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the offer expire."""
  expireAt: DateTime
  id: BigInt!
  nft: Nft
  price: String!
  seller: String!
  seller_signature: String
  status: EstateStatus!
  tokenAddress: String
  tx: String
  type: EstateType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Possible offers statuses"""
enum EstateStatus {
  active
  finished
}

"""Offer or Sale"""
enum EstateType {
  offer
  sale
}

type Estates {
  estates: [Estate!]
  estatesCount: Int
}

input GetNonceByWalletInput {
  wallet: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  authByWallet(data: AuthByWalletInput!): Auth!
  createEstate(data: CreateEstateInput!): Estate!
  createFakeAccounts: BigInt!
  declineEstate(data: UpdateEstateInput!): Estate!
  refreshToken(token: String!): Token!
  updateEstate(data: UpdateEstateInput!): Estate!
  updateNftMetadata(data: String, meta_id: Int): NftMetadata!
  updateSaleInfoJson(data: String, nftId: Int): Nft!
}

type Nft {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  estates: [Estate!]
  id: BigInt!
  isOnMarketplace: Boolean!
  lastSale: DateTime!
  nftMetadata: NftMetadata
  nftMetadataId: Int
  ownerWalletAddress: String
  saleInfo: JSON
  show: Boolean
  status: Int
  tokenId: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type NftMetadata {
  id: BigInt!
  metadata: JSON
}

type Nfts {
  nfts: [Nft!]
  nftsCount: Int
}

type Nonce {
  nonce: String!
}

input OrderByInput {
  created_at: String
  price: String
}

input PriceWhereInput {
  gt: Int!
  lt: Int!
}

type Query {
  findMyOffersBy(onePage: Int, orderBy: OrderByInput, page: Int, price: PriceWhereInput, searchText: String, status: Int, wallet: String): Estates!
  findNfts(limit: Int, onePage: Int, page: Int, searchText: String, sortList: String): Nfts!
  findOffersBy(onePage: Int, orderBy: OrderByInput, page: Int, price: PriceWhereInput, searchText: String, status: Int, wallet: String): Estates!
  findOffersByWalletAddress(type: Int!, wallet: String!): Estates!
  findSalesBy(onePage: Int, orderBy: OrderByInput, page: Int, price: PriceWhereInput, searchText: String, status: Int): Estates!
  findSalesByWalletAddress(wallet: String!): Estates!
  findUsers(limit: Int, onePage: Int, page: Int, sortList: String): Users!
  getNftListByWallet(wallet: String!): Nfts!
  getNonceByWallet(data: GetNonceByWalletInput!): Nonce!
  me: User!
  nft(id: Int): Nft!
  offer(id: Int): Estate!
  user(id: Int, walletAddress: String): User!
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdateEstateInput {
  buyer: String
  expire_at: DateTime
  id: Int!
  nft_id: Int
  price: String
  seller: String
  status: Int
  token_address: String
  type: Int
}

type User {
  id: BigInt!
  lastSignAt: DateTime!
  nonce: String
  status: Int
  walletAddress: String!
}

type Users {
  users: [User!]
  usersCount: Int
}