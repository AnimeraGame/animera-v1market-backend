generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount", "filterJson", "orderByRelation"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blockchains {
  id          String    @id @default(uuid())
  name        String?   @db.VarChar(100)
  status      Int?
  rpcProvider String?
  wsProvider  String?
  currency    String
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @updatedAt @db.Timestamp(6)

  contracts contracts[]
}

model contracts {
  id                 String    @id @default(uuid())
  address            String    @default("") @db.VarChar(255)
  blockchainId       String
  name               String    @default("")
  abi                Json
  status             Int       @default(1)
  createdAt          DateTime  @default(now()) @db.Timestamp(6)
  updatedAt          DateTime? @updatedAt @db.Timestamp(6)
  listenEvents       Boolean   @default(false)
  initialBlockNumber Int       @default(0)
  nonce              Int       @default(0)

  transactions transactions[]
  blockchain   blockchains    @relation(fields: [blockchainId], references: [id])
}

model orders {
  id              String    @id @default(uuid())
  userId          String
  status          Int       @default(0)
  quantity        Int       @default(0)
  type            String
  source          String?
  campaignId      String?
  sub             String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  utmContent      String?
  transactionHash String?
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime? @updatedAt @db.Timestamp(6)

  user users @relation(fields: [userId], references: [id])
}

model users {
  id            String   @id @default(uuid())
  status        Int
  walletAddress String?  @unique @db.VarChar(50)
  nonce         String?  @db.VarChar(50)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)
  lastSignAt    DateTime? @db.Timestamp(6)

  orders          orders[]
  direct_offer_creators     direct_offers[] @relation("offer_by")
  direct_offer_winners      direct_offers[] @relation("offer_winner")
}

model transactions {
  id               String    @id @default(uuid())
  contractId       String
  transactionHash  String    @unique
  transactionIndex BigInt
  blockHash        String
  blockNumber      BigInt
  datetime         DateTime  @db.Timestamp(6)
  input            String?
  decodedInput     Json?
  txNameFromInput  String?
  from             String?
  to               String?
  status           Boolean? @default(false)
  value            BigInt    @default(0)
  gas              BigInt
  cumulativeGasUsed BigInt @default(0)
  gasPrice         BigInt
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt @db.Timestamp(6)

	contract contracts @relation(fields: [contractId], references: [id])
}

model nfts {
  id                   String          @id @default(uuid())
  nft_metadata_id      String?
  sale_info            Json?
  status               Int?
  show                 Boolean?
  created_at           DateTime        @db.Timestamp(6)
  updated_at           DateTime        @db.Timestamp(6)
  nft_metadata         nft_metadata?   @relation(fields: [nft_metadata_id], references: [id])
  owner_wallet_address String?         @db.VarChar(50)
  token_id             String          @unique
  is_on_marketplace    Boolean         @default(false)
  last_sale            DateTime?       @db.Timestamp(6)
	direct_offers				 direct_offers[]

  @@index([nft_metadata_id], name: "index_nfts_on_nft_metadata_id")
}

model nft_metadata {
  id              String        @id @default(uuid())
  metadata        Json?
  token_id        String        @unique
  created_at      DateTime      @db.Timestamp(6)
  updated_at      DateTime      @db.Timestamp(6)
  nfts            nfts[]
}

model direct_offers {
  id         String    @id @default(uuid())
  type       Int       @default(0) @db.SmallInt
  bundle_id  String?
  nft_id     String?
  offer_id   String    @unique
  price      Float     @default(0.0)
  currency   String    @default("CBC") @db.VarChar(10)
  from       String
  winner_id  String?
  tx         String    @unique @db.VarChar(100)
  buy_tx     String?   @unique @db.VarChar(100)
  status     Int       @default(0) @db.SmallInt
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt @db.Timestamp(6)
  closed_at  DateTime? @db.Timestamp(6)

  nft       nfts?    @relation(fields: [nft_id], references: [id])
  from_user users    @relation("offer_by", fields: [from], references: [id])
  winner    users?   @relation("offer_winner", fields: [winner_id], references: [id])

  @@index([nft_id], name: "index_direct_offers_on_nft_id")
  @@index([closed_at], name: "index_direct_offers_on_closed_at")
  @@index([status], name: "index_direct_offers_on_status")
  @@index([winner_id], name: "index_direct_offers_on_winner_id")
}